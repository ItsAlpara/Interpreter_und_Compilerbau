Precedence

assign 		rechts assoziativ
or		links	"
xor		links	"
and		links	"
EQUAL,NOT_EQUAL	links	"
<=, =>, <, >	-	"	Paarweise auswerten, a < b < c wie Mathematik: b ist aus intervall a,c UND Ausdruck nur einmal ausgeführt
+, -		links	"
*,\,|/,mod	links	"
**,e		rechts	"

++,--,imag	links	" 	(unaray Postfix)

+,-,not 	rechts	" 	(unary prefix)




Variablen und Arithmetische Ausdrücke
0|[1-9][0-9] 			    yes
| 0x(0|[1-9A-F][0-9A-F]*) 	yes
| 0b(0|1[0-1]*) 		    yes
floats? 			        yes -> "."
2e15 				        yes -> Operator 2e 15
Complex 			        yes -> Operator -> "5i"			Änderung: "Imag"

Addition: 			+
Minus: 				-
Multiplikation: 		*
Abrundende Division: 		\
Division: 			|
Aufrundende Division: 		/
Modulo: 			mod
Klammern: 			( )
Prefix Minus: 			-
Betrag: 			+
Potenz: 			**
Postfix 			Dekrement: x-- Bindet am Stärksten	Änderung: unary bindet nun Stäker
Postfix 			Inkrement: x++ Bindet am Stärksten	Änderung: unary bindet nun Stäker

Größer gleich: 			=
Größer: 			<
Kleiner: 			>
Gleich: 			=
Ungleich: 			!=
Zuweisung: 			:=

Boolsche Operatoren müssen klein geschrieben werden:			Änderung: "nur" 0|1
Und 				and
Oder 				or
Exclusive Oder 		xor
Exclusive und 		xand					                    Änderung: Fliegt raus
Nicht 				not
Falsch				0
Wahr 				sonst alles andere
3 oder 0 			wir addieren
3 and 0 			wir multiplizieren

Emojis									Hinzufügen: In Identifier: [a-zA-z\u007f - \nffff_] DONE

Überdenken/Probieren: 		Bezeichner mit Emojis ohne führende Ziffer DONE

Multiline: 			Delimiter vorne und hinten		Änderung: \#.*?\# DONE

DONE 05.05.2025

<---------------------------------------------------------->
Generator:
Generatorfunktion implementieren

Syntax: 2 Tokens
Postfix Opertatoren fliegen raus
x +:= 2
x -:= 2
x /:= 2
x \:= 2
x |:= 2
x and:= 2
x or:= 2
x !=:= 2
x =:= 2


<---------------------------------------------------------->
19.05.2025
U: Var -> N    S: N -> N
E: Var -> Val
E(x) = 3, E(z) = 1 ...
|
v
E'(z) = 1 ..., E'(x) = neu

E' = E.copy();
Aufruf = E'[x] = a

Lexer: 'Lambda hinzufügen'

Parser: 2 Regeln: lambda & call

Interpreter: Lambda erzeugt ein neues enviorment, hier wird das lexikal scoping festgelegt

env = Envoironment()
from envoironment import Environment

U: env
x: identifier
expr: Variablen
S: Speicher (Store)
                             |Closure |
Sem(LAMBDA(x): expr,U;S) =  ((U,x,expr),S)
Val wird entsprechend erweitert.

Sem(expr1(expr2),U;S) = Sem(exprf,U',S''')
   ((Uf,xf,exprf),S') = Sem(expr1,U;S)
              (a,S'') = Sem(expr2,U;S')
                   U' = Uf[xf: nxt(S''')] # put    nxt = max(S''^-1)+1 #nächste Freie Speicherstelle
                 S''' = S''[U'(xf): a] #In Speicherstelle den Wert eintragen und return

Überlegungen:
f = lambda(x,y,z): x+y
g = f(2,3)
g(3)

f=lambda(x):lambda(y):x+y
f(2)(3)












